<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description>Things i gone and done
</description>
    <link>/bloghttps://jon-e.net</link>
    <atom:link href="https://jon-e.net/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 02 Nov 2018 00:18:02 +0000</pubDate>
    <lastBuildDate>Fri, 02 Nov 2018 00:18:02 +0000</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Past Art, Vol. 1: Insomia</title>
        <description>&lt;p&gt;I can’t sleep most nights, but some rare nights are useful. Sometimes I spend more time finishing things, but other times I spend a dozen unblinking hours baking something halfway. A few selected one-shot art pieces from the past few years.&lt;/p&gt;

&lt;p&gt;This is the first of my attempts to remember what I do by cataloguing my art. I can roughly divide the rest of it into brain-related art, large-scale art worthy of more description, and smaller-scale art worthy of nothing. Those will be other posts.&lt;/p&gt;

&lt;p&gt;Ordered by chronology, not quality. Actually the older stuff is worse because I didn’t really have control over my life through most of it. They all speak tender nothings to me though.&lt;/p&gt;

&lt;h1 id=&quot;feb-13-2015---audio-glitches&quot;&gt;Feb 13, 2015 - Audio Glitches&lt;/h1&gt;

&lt;p&gt;I know this was a product of insomina. I think the insomnia was a product of some angst over my then partner. I’m not sure why they’re related.&lt;/p&gt;

&lt;p&gt;I had taken a pretty unremarkable picture out riding my bike in the farmland surrounding Salem OR.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/artvol1/audioedit_orig.jpg&quot; alt=&quot;nothing to see here&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;nothing to see here&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had just read &lt;a href=&quot;http://rosa-menkman.blogspot.com&quot;&gt;Rosa Menkman&lt;/a&gt;’s excellent &lt;a href=&quot;https://beyondresolution.info/A-Vernacular-of-File-Formats&quot;&gt;“Vernacular of File Formats”&lt;/a&gt; which will put you in touch with the numerical reality of photos. This was the blessed time before I knew anything about programming. I knew audio tools. I wanted to use audio tools.&lt;/p&gt;

&lt;p&gt;The process is completely lost, but it involved opening the image in a text editor and using reverb. It is one of my favorites.&lt;/p&gt;

&lt;p&gt;If you use it as a background, people worry about your screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/artvol1/audioedit.png&quot; alt=&quot;audio edit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;april-4th-2016---stichky-slug&quot;&gt;April 4th, 2016 - Stichky Slug&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;this video has bright flashing colors and might be unsuitable for people with epilepsy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My garden was only flowers this spring, and the slugs were eating my violas. I didn’t mind. I loved catching them at it in the dark.&lt;/p&gt;

&lt;p&gt;I’d like to find the code for this. From what I recall I propagated pixel values across frames if they were getting brighter, but I had just started programming and the result is more likely from some deep secret in the convolutions of hundreds of lines of bad python. Mix in a few compression artifacts…&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/stichky_slug.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h1 id=&quot;jan-21-2017---the-last-wild-forest-bambi&quot;&gt;Jan 21, 2017 - The Last Wild Forest Bambi&lt;/h1&gt;

&lt;p&gt;I get sad about the way people write about climate change on the internet. I was drinking a lot. This was a hard winter. I had just downloaded a pirated copy of photoshop and this sentence seemed like just as good music as any.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/artvol1/bambino.png&quot; alt=&quot;bambino&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;feb-23-2017---yll-shoot-yr-eye-out&quot;&gt;Feb 23, 2017 - yll shoot yr eye out&lt;/h1&gt;

&lt;p&gt;This isn’t so much my art as it is being depressed and watching movies rendered as ASCII.&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/yllshootyreye.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h1 id=&quot;feb-27-2017---no&quot;&gt;Feb 27, 2017 - no&lt;/h1&gt;

&lt;p&gt;Created under similar circumstances, I was watching a lot of educational films from the 1940’s. The audio is important.&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/nooo.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;There’s a big gap in time here as I started to make more brain-focused art and put myself back together. More of that to come.&lt;/p&gt;

&lt;h1 id=&quot;april-28-2018---coop-logos&quot;&gt;April 28, 2018 - Coop Logos&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;these videos have bright flashing colors and might be unsuitable for people with epilepsy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I maintain the website for my coop, and it needed a background. Pictures are boring. Cellular automata and the belousov-zhabotinsky reaction are beautiful. A few videos generated using this basic code structure (sorry for the um utter unreadability… writing unsustainable and cryptic code is sort of in the nature of insomia art):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from skimage import morphology
from tqdm import trange, tqdm
from scipy.signal import convolve2d
import matplotlib.pyplot as plt
from matplotlib import animation, cm, colors


img = Image.open('/some/image.png')
img = np.array(img)

# remove alpha channel
if img.shape[2] == 4:
    img = img[:,:,0:3]

# compress
img_comp  = morphology.label(img, return_num=True)


#flatten colors
img_flat = np.sum(img, axis=2)
imcolors, counts = np.unique(img_flat.flatten(), return_counts=True)
imcolors = imcolors[np.argsort(counts)[-3:-1]]

img_flat[~np.isin(img_flat, imcolors)] = 0

# the two next-to-most-frequent are the lighter greens
rgbcolors_1, rgbcounts = np.unique(img.reshape(-1,3), return_counts=True, axis=0)
rgbcolors = rgbcolors_1[np.argsort(rgbcounts)[-3:-1]]
back_color = rgbcolors_1[np.argsort(rgbcounts)[-1]]

# make masks
mask1 = np.zeros_like(img_flat, dtype = np.bool)
mask2 = np.zeros_like(img_flat, dtype = np.bool)

mask1[np.where(img_flat==imcolors[1])] = True
mask2[np.where(img_flat==imcolors[0])] = True

##################
# Initialize the array with random amounts of A, B and C.
img_bz = np.zeros_like(img, dtype=np.float)
img_bz[:,:,0] = 0.50
img_bz[mask1,0] = 0.55
img_bz[mask2,0] = 0.6
img_bz[:,:,1] = 0.50-np.random.rand(img_bz.shape[0], img_bz.shape[1])/10.
img_bz[mask1,1] = 0.55-np.random.rand(img_bz[mask1,1].shape[0])/10.
img_bz[mask2,1] = 0.6-np.random.rand(img_bz[mask2,1].shape[0])/10.
img_bz[:,:,2] = 0.50+np.random.rand(img_bz.shape[0], img_bz.shape[1])/10.
img_bz[mask1,2] = 0.55+np.random.rand(img_bz[mask1,1].shape[0])/10.
img_bz[mask2,2] = 0.6+np.random.rand(img_bz[mask2,1].shape[0])/10.
img_bz = np.clip(img_bz, 0, 1)

img_bz = np.rollaxis(img_bz,2)
arr = np.stack([img_bz, img_bz])

ny, nx = arr.shape[2], arr.shape[3]

# Reaction parameters.
alpha, beta, gamma = .2, .1, .1

def update(p,arr):
    &quot;&quot;&quot;Update arr[p] to arr[q] by evolving in time.&quot;&quot;&quot;

    # Count the average amount of each species in the 9 cells around each cell
    # by convolution with the 3x3 array m.
    q = (p+1) % 2
    s = np.zeros((3, ny,nx))
    m = np.ones((3,3)) / 9
    for k in range(3):
        s[k] = convolve2d(arr[p,k], m, mode='same', boundary='wrap')
    # Apply the reaction equations
    arr[q,0] = s[0] + s[0]*(alpha*s[1] - gamma*s[2])
    arr[q,1] = s[1] + s[1]*(beta*s[2] - alpha*s[0])
    arr[q,2] = s[2] + s[2]*(gamma*s[0] - beta*s[1])
    # Ensure the species concentrations are kept within [0,1].
    np.clip(arr[q], 0, 1, arr[q])
    #arr = arr % 1.
    return arr


# Set up the image
fig, ax = plt.subplots()
im = ax.imshow(arr[0,0], norm=colors.NoNorm())
ax.axis('off')
n_frames = 2000

pbar = tqdm(total = n_frames)

def animate(i, arr):
    &quot;&quot;&quot;Update the image for iteration i of the Matplotlib animation.&quot;&quot;&quot;

    if i == 100:
        alpha, beta, gamma = 1.2, 1., 1.
        print('changed')
    arr = update(i % 2, arr)
    im.set_array(arr[i % 2, 0])
    #im.set_array(arr[0, 0])
    pbar.update()
    return [im]

Writer = animation.writers['ffmpeg']
writer = Writer(fps=30, metadata=dict(artist='Me'), bitrate=1800,
                extra_args=['-vcodec', 'libx264'])

anim = animation.FuncAnimation(fig, animate, frames=2000, interval=5,
                               blit=True, fargs=(arr,))
plt.show()
anim.save('/some/video.mp4', writer=writer)


&lt;/code&gt;&lt;/pre&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/logo1.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;I think this second one evolved to the left faster for pixels with larger brightness values. The only thing I know for sure is that it starts to look like melted plastic.&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/logo2.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;This video enters my void.&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/artvol1/logo3.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

</description>
        <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://jon-e.net/blog/2018/11/01/Past-Art-Vol-1/</link>
        <guid isPermaLink="true">https://jon-e.net/blog/2018/11/01/Past-Art-Vol-1/</guid>
        
        <category>art</category>
        
        <category>bad art</category>
        
        <category>collections</category>
        
        <category>glitch</category>
        
        <category>design</category>
        
        <category>video</category>
        
        <category>audio</category>
        
        
      </item>
    
      <item>
        <title>Northern Lights</title>
        <description>&lt;style&gt;
    body {
        background-color: black;
        color: #F5F5F5;
    }

    .header {
        background-color: #00000090;
        color: #F0F0F0;
    }
    .header__title {
        color: #F0F0F0;
    }

    .header__list a,
    .header__list span{
        color: #F0F0F0;
    }

    #markdown a {
    color: #B951D1;
    border-bottom: 2px solid #888888;
    -webkit-box-shadow: inset 0 -3px 0 #222222;
    box-shadow: inset 0 -3px 0 #222222;
    }

    blockquote, q {
    margin: 0 0 1.5rem;
    font-family: Lora,serif;
    font-weight: 400;
    font-size: 1.25em;
    color: #888888;
    line-height: 1.4;
    }

    .post__author a {
    color: #B951D1;
    -webkit-transition: color .2s ease-in-out;
    transition: color .2s ease-in-out;
    }
&lt;/style&gt;

&lt;p&gt;I needed to build the northern lights in my kitchen. (localized entirely within my kitchen).&lt;/p&gt;

&lt;p&gt;They look like this:&lt;/p&gt;
&lt;video controls=&quot;&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/nlights.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;And they also twinkle:&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/twinkle.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;They only turn on rarely because they are magic, but if you need them on to feel the close glow of the north pole you can enter the secret code…&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/onoff.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h1 id=&quot;ingredients&quot;&gt;Ingredients&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Object&lt;/th&gt;
      &lt;th&gt;Link&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;LED Strips&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.aliexpress.com/item/WS2811-IC-Strip-Vedio-show-addressable-individually-ip30-or-waterproof-ip67-5050-RGB-SMD-30/32624331128.html?spm=a2g0s.9042311.0.0.77624c4dozuwtS&quot;&gt;get some leds&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LED Stands (3d mesh)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://jon-e.net/blog/assets/hosted/fat_led_stand.stl&quot;&gt;download an stl&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arduino Uno&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://store.arduino.cc/usa/arduino-uno-rev3&quot;&gt;arduinos here&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Photodiode&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.digikey.com/products/en/sensors-transducers/optical-sensors-photodiodes/543&quot;&gt;idk found in the lab try digikey&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12V 3A DC Power Supply&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;200 Ohm Resistor&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;makin-it&quot;&gt;Makin it&lt;/h1&gt;

&lt;p&gt;is simple.&lt;/p&gt;

&lt;h2 id=&quot;step-1-board-of-leds&quot;&gt;Step 1: Board of LEDs&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Print a bunch of these &lt;a href=&quot;https://jon-e.net/blog/assets/hosted/fat_led_stand.stl&quot;&gt;little stands&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jon-e.net/blog/assets/images/led_stand.png&quot; alt=&quot;led stand&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;moody as your mahogany past&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and glue them onto a board thusly&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jon-e.net/blog/assets/images/led_build_1.jpg&quot; alt=&quot;glued to board&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-wire-it-up&quot;&gt;Step 2: Wire it up&lt;/h2&gt;

&lt;p&gt;Like this. You need to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Power the LEDs, in my case with 12V and 3A split between 3 banks of 66 lights.&lt;/li&gt;
  &lt;li&gt;Wire the DMX input lines to the arduino through some resistors and&lt;/li&gt;
  &lt;li&gt;Attach a photodiode to sense when it gets dark. I used a 4.7kOhm resistor to get the photodiode in the luminance range of my kitchen, this will vary depending on your diode and ambient lighting conditions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://jon-e.net/blog/assets/images/led_build_circuit.png&quot; alt=&quot;yeah like this i said&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do not do as I do, and behold this as a warning. This style of circuit is built to cause fires and generate solder fumes. I epoxied over the exposed solder and wire to avoid dust combustion. Disregard the capacitor, it proved to explode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jon-e.net/blog/assets/images/led_build_wired.jpg&quot; alt=&quot;disregard this&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-code&quot;&gt;Step 3: Code&lt;/h2&gt;

&lt;p&gt;I stole a lot of this, hopefully I attributed as I went because I do not remember where it came from now. You will need the &lt;a href=&quot;http://fastled.io&quot;&gt;FastLED library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is that we want to turn the lights on when the ambient light gets below a certain level. Except we don’t want to just turn on, that would be too predictable for a lightswitch. Instead, we pick a random delay up to an hour and wait to turn on. You catch the northern lights by chance.&lt;/p&gt;

&lt;p&gt;But if you can’t wait for luck, you make your own. Flicking the light on and off three times will trigger the light.&lt;/p&gt;

&lt;p&gt;Right now there are two modes, the northern lights, and twinkling. One picks a max value/saturation color in HSV space and fades its neighbors towards it. The other twinkles white lights. Who knows which is which. Each time the light turns on it picks a program at random.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;
#include &amp;lt;FastLED.h&amp;gt;

#define NUM_STRIPS 3
#define NUM_PER_STRIP 22
#define NUM_LEDS NUM_STRIPS*NUM_PER_STRIP

// led array
CRGB leds[NUM_LEDS];

// https://learn.adafruit.com/photocells/arduino-code
int photocellPin = 0;     // the cell and 10K pulldown are connected to a0
int photocellReading;     // the analog reading from the sensor divider
#define DATA_PIN_1 2
#define DATA_PIN_2 3
#define DATA_PIN_3 4

// array to hold times since last light flick
// initialize to above threshold so we don't autostart the first time
long codetimes[3] = {10000, 10000, 10000};

// some logic variables to tell what state we're in.
// it's crude but it works damn it
bool ison;                // are the LEDs on?
bool isdark;              // did it go dark?
int program=1;            // which program are we running?
unsigned long wentdark=0; // did we just go dark?
long waittime;            // how long should we wait to turn the lights on?
unsigned long ontime;     // how long should the lights stay on?
long darktime;            // how long was it dark?

// idiosyncratic lighting variables
int lightthresh=200;
int flicklength=5000;
int framedelay=30;


void loop() {
  photocellReading = analogRead(photocellPin);
  //Serial.print(&quot;Analog reading = &quot;);
  //Serial.println(photocellReading);     // the raw analog reading

  if (photocellReading &amp;gt; lightthresh){
    // if we're just getting light, turn the lights off.
    if (isdark == true){
      for(int i=0; i&amp;lt;NUM_LEDS; i++){
        leds[i] = CRGB(0, 0, 0);

      }
      LEDS.setBrightness(0);
      LEDS.show();
      isdark = false;
      ison = false;

      // stash the code
      // record the length of time that the light was off
      codetimes[0] = codetimes[1];
      codetimes[1] = codetimes[2];

      darktime = millis()-wentdark;
      codetimes[2] = darktime;
    }
    return;
  } else {
    if (isdark == false){
      // when it first gets dark...
      // pick a program
      if (random8()&amp;lt;128){
        program = 1;
      } else {
        program = 2;
      }

      // get time off
      wentdark = millis();

      // if we are getting manually turned on, the wait time is zero
      if (codetimes[2] &amp;lt; flicklength &amp;amp;&amp;amp; codetimes[1] &amp;lt; flicklength){
        waittime = 0;
      } else {
        // otherwise get delay between now and an hour
        waittime = random(0, 3600000);
      }

      // turn the lights on
      isdark = true;
      ison = false;
    }

    if (millis()&amp;lt;wentdark || millis()&amp;lt;ontime){
      // arduino clock flipped back to zero
      wentdark = 0;
      ontime = 0;
    }


    if (ison == false &amp;amp;&amp;amp; (millis()-wentdark)&amp;gt;waittime){
      // we're just turning on of our own accord
      // pick a program
      if (random8()&amp;lt;128){
        program = 1;
      } else {
        program = 2;
      }

      // when did we go on? how long will we go?
      ontime = millis();
      waittime = random(600000, 3600000);

      // if we have waited long enough...
      LEDS.setBrightness(255);
      ison = true;

    }


    // if the light turns back on turn off.
    if (ison == true &amp;amp;&amp;amp; (millis()-ontime)&amp;gt;waittime){
      for(int i=0; i&amp;lt;NUM_LEDS; i++){
        leds[i] = CRGB(0, 0, 0);

      }
      LEDS.setBrightness(0);
      LEDS.show();
      wentdark = millis();
      waittime = random(600000, 3600000);
      //waittime = 5000;
      LEDS.setBrightness(0);
      ison = false;
    }


    // finally if we're on, do the thing.
    if (ison == true){
      if (program == 1){
        northernLights(leds);
      } else {
        twinkle(leds);
      }
    }


    LEDS.show();
  }


  delay(framedelay);


}


void setup() {
  // init values
  ison = false;
  isdark = false;

  random16_set_seed(8934);
  random16_add_entropy(analogRead(3));

  // start up serial if ya want it
  //Serial.begin(9600);
  //Serial.println(&quot;resetting!&quot;);

  // setup leds
  delay(1000);
  LEDS.addLeds&amp;lt;WS2811,DATA_PIN_1,BRG&amp;gt;(leds,0, NUM_PER_STRIP);
  LEDS.addLeds&amp;lt;WS2811,DATA_PIN_2,BRG&amp;gt;(leds,NUM_PER_STRIP, NUM_PER_STRIP);
  LEDS.addLeds&amp;lt;WS2811,DATA_PIN_3,BRG&amp;gt;(leds,NUM_PER_STRIP*2,NUM_PER_STRIP);
  LEDS.setBrightness(255);

  for(int i=0; i&amp;lt;NUM_LEDS; i++){
        leds[i] = CRGB(0, 0, 0);

  }
  LEDS.setBrightness(0);
  LEDS.show();
}



void northernLights(CRGB* leds){
  for(int i=0; i&amp;lt;NUM_LEDS; i++){

    if (i == NUM_LEDS-1) {
      fadeTowardColor(leds[i],leds[i-1],5);
    }
    else if (i==0){
      fadeTowardColor(leds[i],leds[i+1],5);
    }
    else{
      fadeTowardColor(leds[i],(leds[i+1]+leds[i-1])/2,5);
    }

    if(random16()&amp;lt;40){
        CRGB color = CHSV( random8(), 255, 255);
        fadeTowardColor(leds[i], color, 255);
  }
  //leds[i] %= 225;
  }
  //delay(30);
}

void twinkle(CRGB* leds){
  for(int i=0; i&amp;lt;NUM_LEDS; i++){

    fadeTowardColor(leds[i],CRGB(0,0,0),16);

    if(random16()&amp;lt;50){
        fadeTowardColor(leds[i], CRGB(255,255,255), 255);
    }
  }
}

void nblendU8TowardU8( uint8_t&amp;amp; cur, const uint8_t target, uint8_t amount)
{
  if( cur == target) return;

  if( cur &amp;lt; target ) {
    uint8_t delta = target - cur;
    delta = scale8_video( delta, amount);
    cur += delta;
  } else {
    uint8_t delta = cur - target;
    delta = scale8_video( delta, amount);
    cur -= delta;
  }
}

// Blend one CRGB color toward another CRGB color by a given amount.
// Blending is linear, and done in the RGB color space.
// This function modifies 'cur' in place.
CRGB fadeTowardColor( CRGB&amp;amp; cur, const CRGB&amp;amp; target, uint8_t amount)
{
  nblendU8TowardU8( cur.red,   target.red,   amount);
  nblendU8TowardU8( cur.green, target.green, amount);
  nblendU8TowardU8( cur.blue,  target.blue,  amount);
  return cur;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viola.&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;none&quot;&gt;
  &lt;source src=&quot;/blog/assets/images/lightzoom.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0100</pubDate>
        <link>https://jon-e.net/blog/2018/10/18/northern-lights/</link>
        <guid isPermaLink="true">https://jon-e.net/blog/2018/10/18/northern-lights/</guid>
        
        <category>art</category>
        
        <category>LEDs</category>
        
        <category>arduino</category>
        
        <category>physical art</category>
        
        <category>light</category>
        
        
      </item>
    
  </channel>
</rss>
